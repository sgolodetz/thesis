function merge_nodes : (parent : int; child : int) $\to$ int
	var survivingIndex, otherIndex : int := min(parent, child), max(parent, child);

	// Move all the edges descending from the node to be removed to the surviving node.
	var otherChildren : Set<int> := tree_children(otherIndex);
	if survivingIndex = child then otherChildren.erase(child);
	for each c $\in$ otherChildren
		set_tree_parent(c, survivingIndex);
		base().set_edge_weight(c, survivingIndex, edgeWeight(c, otherIndex));

	// If the child survives, it needs connecting to the parent of the initial parent.
	if survivingIndex = child then
		set_tree_parent(survivingIndex, tree_parent(parent));
		var weight : EdgeWeight := edge_weight(otherIndex, tree_parent(parent));
		base().set_edge_weight(survivingIndex, tree_parent(parent), weight);

	// If the root gets removed during a merge with another node, update its index.
	if root() = otherIndex then
		set_root(survivingIndex);

	base().remove_node(otherIndex);
	return survivingIndex;

function tree_children : (n : int) $\to$ Set<int>
	return adjacent_nodes(n) $\backslash$ {tree_parent(n)};
