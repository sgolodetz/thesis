function construct_rooted_mst : (graph : Graph) $\to$ $\emptyset$

	// Build an MST for the graph using Prim's algorithm.
	var pq : PriorityQueue<int,EdgeWeight>;
	var nodeIndices : Vector<int> := graph.node_indices();
	if nodeIndices.empty() then throw;
	set_root(nodeIndices.front());
	pq.insert(root(), 0);
	set_tree_parent(root(), -1);
	for i := 1 up to nodeIndices.size()
		pq.insert(nodeIndices[i], $\infty$);
		set_tree_parent(nodeIndices[i], -1);

	while not pq.empty()
		var u : int := pq.top().id();
		pq.pop();
		for each v $\in$ graph.adjacent_nodes(u)
			var weight : EdgeWeight := graph.edge_weight(u, v);
			if pq.contains(v) and weight $<$ pq.element(v).key() then
				pq.update_key(v, weight);
				set_tree_parent(v, u);

	// Add the adjacent edges (since it's a rooted MST, just add the edges
	// connecting each node to its parent).
	for each u $\in$ base().nodes()
		var v : int := tree_parent(u);
		if v $\ne$ -1 then
			base().set_edge_weight(u, v, graph.edge_weight(u, v));

function set_tree_parent : (n : int; parent : int) $\to$ $\emptyset$

	// Note: set_tree_parent() intentionally creates node n if it doesn't
	//       already exist.
	if base().has_node(n) then
		base().node_properties(n).parent := parent;
	else
		base().set_node_properties(n, make_node_properties(parent));

function tree_parent : (n : int) $\to$ int
	return base().node_properties(n).parent;
